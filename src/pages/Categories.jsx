import React, { useState, useEffect } from 'react';
import { FiTrash2, FiPlus } from 'react-icons/fi'; 

// üåüüåüüåü Firebase ‡¶è‡¶¨‡¶Ç Firestore ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó üåüüåüüåü
import { initializeApp } from 'firebase/app';
import { 
    getFirestore, collection, addDoc, getDocs, 
    query, deleteDoc, doc, where, // 'where' ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    count // ‚ö†Ô∏è Count ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá, Firebase v9.4+ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶†‡¶ø‡¶ï SDK ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
} from 'firebase/firestore'; 

import firebaseConfig from '../components/FirebaseConfig'; 

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);

console.log("üî• Firebase App Successfully Initialized and Database Connected!");
// üåüüåüüåü Firebase ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∂‡ßá‡¶∑ üåüüåüüåü

import './Categories.css';

const CategoryListPage = () => {
    const [categories, setCategories] = useState([]);
    const [newCategoryName, setNewCategoryName] = useState('');
    const [isLoading, setIsLoading] = useState(true); 
    const [isCounting, setIsCounting] = useState(false); // ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶ó‡¶£‡¶®‡¶æ ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
    
    const isAddButtonDisabled = newCategoryName.trim() === '';

    // -------------------------------------------------------------
    // üåüüåüüåü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡ßß: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ó‡¶£‡¶®‡¶æ üåüüåüüåü
    // -------------------------------------------------------------
    const fetchCategoryItemCounts = async (loadedCategories) => {
        setIsCounting(true);
        const productsRef = collection(db, "products");
        const categoriesWithCounts = await Promise.all(
            loadedCategories.map(async (category) => {
                try {
                    // ‡¶∏‡ßá‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ID ‡¶¶‡¶ø‡ßü‡ßá 'products' ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶®‡ßá ‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∞‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
                    const q = query(productsRef, where("categoryId", "==", category.id));
                    
                    // üí° NOTE: ‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂‡¶≠‡¶æ‡¶¨‡ßá, 'count()' ‡¶è‡¶ó‡ßç‡¶∞‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§
                    // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ SDK/‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶¨‡ßá getDocs ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º:
                    const querySnapshot = await getDocs(q);
                    const itemCount = querySnapshot.size; // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá

                    return { ...category, totalItems: itemCount };

                } catch (error) {
                    console.error(`Error counting items for category ${category.name}: `, error);
                    return { ...category, totalItems: 0 }; // ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá 0 ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                }
            })
        );
        setCategories(categoriesWithCounts);
        setIsCounting(false);
    };

    // -------------------------------------------------------------
    // üåüüåüüåü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡ß®: ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ø‡¶Ç ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ üåüüåüüåü
    // -------------------------------------------------------------
    useEffect(() => {
        const fetchCategories = async () => {
            setIsLoading(true);
            try {
                const q = query(collection(db, "categories"));
                const querySnapshot = await getDocs(q);
                
                const loadedCategories = [];
                querySnapshot.forEach((doc) => {
                    loadedCategories.push({
                        id: doc.id,
                        ...doc.data(),
                        totalItems: 0, // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá 0 ‡¶¨‡¶æ undefined ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
                    });
                });
                
                // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
                setCategories(loadedCategories); 
                if (loadedCategories.length > 0) {
                    await fetchCategoryItemCounts(loadedCategories); // üëà ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ
                }

            } catch (error) {
                console.error("Error fetching categories: ", error);
                alert("‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
            } finally {
                setIsLoading(false);
            }
        };

        fetchCategories();
    }, []); 


    // -------------------------------------------------------------
    // üåüüåüüåü ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® üåüüåüüåü
    // -------------------------------------------------------------
    const handleAddCategory = async () => {
        const categoryName = newCategoryName.trim();

        if (categoryName !== '') {
            try {
                const newCategoryData = {
                    name: categoryName,
                    totalItems: 0, // ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶§‡ßá ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡ß¶ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ
                    createdAt: new Date(), 
                };

                const docRef = await addDoc(collection(db, "categories"), newCategoryData);
                
                // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º
                const newCategoryWithId = { ...newCategoryData, id: docRef.id };
                setCategories([newCategoryWithId, ...categories]);
                
                setNewCategoryName('');

            } catch (error) {
                console.error("Error adding document: ", error);
                alert("‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
            }
        }
    };
    
    // -------------------------------------------------------------
    // üåüüåüüåü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® üåüüåüüåü
    // -------------------------------------------------------------
    const handleDelete = async (categoryId, categoryName) => {
        if (window.confirm(`Are you sure you want to delete the category: "${categoryName}"?`)) {
             // ‚ö†Ô∏è ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶∏‡ßá‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ 'categoryId' ‡¶Ü‡¶™‡¶°‡ßá‡¶ü/‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§
            try {
                await deleteDoc(doc(db, "categories", categoryId));
                
                const updatedCategories = categories.filter(cat => cat.id !== categoryId);
                setCategories(updatedCategories);
                
                alert(`Category "${categoryName}" successfully deleted.`);

            } catch (error) {
                console.error("Error removing document: ", error);
                alert("‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
            }
        }
    };
    

    return (
        <div className="category-list-page">
            
            <header className="page-header">
                <h2 className="page-title">Categories</h2>
                
                <div className="header-actions">
                    <div className="category-input-group">
                        <input
                            type="text"
                            placeholder="Enter new category name..."
                            value={newCategoryName}
                            onChange={(e) => setNewCategoryName(e.target.value)}
                            onKeyPress={(e) => {
                                if (e.key === 'Enter' && !isAddButtonDisabled) {
                                    handleAddCategory();
                                }
                            }}
                        />
                        
                        <button 
                            className="add-category-button-page"
                            onClick={handleAddCategory}
                            disabled={isAddButtonDisabled} 
                        >
                            <FiPlus className="plus-icon-react" />
                            Add Category
                        </button>
                    </div>
                </div>
            </header>

            <div className="category-table-container">
                
                {/* ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü */}
                {(isLoading || isCounting) && (
                    <div className="loading-message">
                        {isLoading ? 'Loading Categories...' : 'Counting items...'}
                    </div>
                )}
                
                {/* ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ */}
                {!isLoading && (
                    <table className="category-table">
                        
                        <thead>
                            <tr>
                                <th className="th-category">Category Name</th>
                                <th className="th-item-count">Total Item</th> 
                                <th className="th-action">Action</th>
                            </tr>
                        </thead>
                        
                        <tbody>
                            {categories.map((cat) => (
                                <tr key={cat.id}>
                                    <td>
                                        <div className="category-details">
                                            <div className="category-name">{cat.name}</div>
                                        </div>
                                    </td>
                                    
                                    {/* üåüüåüüåü ‡¶ü‡ßã‡¶ü‡¶æ‡¶≤ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá üåüüåüüåü */}
                                    <td>
                                        {/* isCounting ‡¶ö‡¶≤‡¶æ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® ‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶π‡¶æ‡¶á‡¶´‡ßá‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá */}
                                        {isCounting ? '-' : (cat.totalItems || 0)} 
                                    </td>
                                    
                                    <td>
                                        <div className="action-buttons-table">
                                            <button 
                                                className="action-button-table delete-button"
                                                onClick={() => handleDelete(cat.id, cat.name)}
                                                title="Delete Category"
                                                // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶°‡¶ø‡¶ú‡ßá‡¶¨‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)
                                                // disabled={cat.totalItems > 0} 
                                            >
                                                <FiTrash2 /> 
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                )}

                {/* ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá */}
                {!isLoading && categories.length === 0 && (
                    <div className="no-data-message">
                        No categories found. Start by adding a new category above.
                    </div>
                )}
            </div>
        </div>
    );
};

export default CategoryListPage;
