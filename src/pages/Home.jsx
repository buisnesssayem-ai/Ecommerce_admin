// src/pages/Home.jsx
import './Home.css';
import React, { useState, useEffect } from 'react';

// Firebase SDK ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü:
import { initializeApp } from 'firebase/app'; 
import { getFirestore, collection, query, where, getDocs, orderBy, limit } from 'firebase/firestore'; 

// Firebase ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü: ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ
// FirebaseConfig.js ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
import firebaseConfig from '../components/FirebaseConfig'; 

// --- Firebase Initialization ---
// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
const app = initializeApp(firebaseConfig);
const db = getFirestore(app); // Firestore ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø

// ‡¶°‡¶æ‡¶Æ‡¶ø ‡¶°‡ßá‡¶ü‡¶æ (KPI ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
const dashboardMetrics = [
  { title: "Total Revenue", value: "‡ß≥ 5,000", icon: "üí∞", color: "#4CAF50" },
  { title: "Total Orders", value: "15", icon: "üì¶", color: "#2196F3" },
  { title: "New Customers", value: "05", icon: "üë•", color: "#FF9800" },
  { title: "Out of Stock", value: "02", icon: "‚ö†Ô∏è", color: "#F44336" },
];

// üåüüåüüåü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶°‡ßá‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶ï‡¶Æ‡¶æ ‡¶∏‡¶π) üåüüåüüåü
const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    // Firestore Timestamp ‡¶ï‡ßá JavaScript Date ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
    const date = timestamp.toDate(); 
    
    // ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: Oct 4, 2025 (Month Abbreviation, Day, Year)
    return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short', // 'Oct'
        day: 'numeric',  // '4'
    });
};


const Home = () => {
  
  const [pendingOrders, setPendingOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    // ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ "Pending" ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    const fetchPendingOrders = async () => {
      setLoading(true);
      setError(null);
      try {
        // 'db' ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá Firestore ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ
        const ordersRef = collection(db, "orders");
        
        // Query: status: "Pending" ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø, ‡¶®‡¶§‡ßÅ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ß´‡¶ü‡¶ø
        const q = query(
          ordersRef, 
          where("status", "==", "Pending"), 
          orderBy("createdAt", "desc"), // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ "createdAt" ‡¶´‡¶ø‡¶≤‡ßç‡¶°
          limit(5)
        );
        
        const querySnapshot = await getDocs(q);
        
        const fetchedOrders = querySnapshot.docs.map(doc => {
          const data = doc.data();
          return {
            id: doc.id,
            // Field Mapping: orderNumber -> Order ID
            orderID: data.orderNumber || doc.id.substring(0, 8).toUpperCase(), 
            // Order Date ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
            orderDate: data.createdAt, 
            // Total Payable
            amount: data.totalPayable || 0,
            status: data.status,
          };
        });

        setPendingOrders(fetchedOrders);
      } catch (err) {
        console.error("Error fetching orders: ", err);
        setError("Failed to load orders. Please ensure your Composite Index for 'status' and 'createdAt' is ready.");
      } finally {
        setLoading(false);
      }
    };

    fetchPendingOrders();
  }, []);

  // --- Loading and Error States ---
  if (loading) {
    return <div className="dashboard-container"><p>Loading Dashboard Data...</p></div>;
  }
  
  if (error) {
    return <div className="dashboard-container"><p className="error-message">Error: {error}</p></div>;
  }

  // --- JSX RENDER ---
  return (
    <div className="dashboard-container">
      <h1 className="dashboard-header">Welcome, Admin! üëã</h1>
      <p className="dashboard-subheader">A quick overview of your E-commerce store.</p>

      {/* --- KPI Metrics Section (Using Dummy Data for now) --- */}
      <div className="metrics-grid">
        {dashboardMetrics.map((metric, index) => (
          <div 
            key={index} 
            className="metric-card" 
            style={{ borderLeft: `5px solid ${metric.color}` }}
          >
            <div className="metric-icon" style={{ backgroundColor: metric.color + '1a', color: metric.color }}>
                {metric.icon}
            </div>
            <div className="metric-details">
                <span className="metric-title">{metric.title}</span>
                <span className="metric-value">{metric.value}</span>
            </div>
          </div>
        ))}
      </div>
      
      {/* --- Quick Actions & Recent Activity --- */}
      <div className="dashboard-content-grid">
        
        {/* Recent Orders Table - Fetches real pending data */}
        <div className="activity-panel recent-orders-panel">
          <h2 className="panel-title">New Pending Orders</h2>
          <table>
            <thead>
              <tr>
                <th>Order ID</th>
                <th>Date</th> 
                <th>Amount</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              {pendingOrders.length > 0 ? (
                pendingOrders.map((order) => (
                  <tr key={order.id}>
                    <td>{order.orderID}</td>
                    {/* üåüüåüüåü ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡¶Æ‡¶æ ‡¶∏‡¶π ‡¶°‡ßá‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá üåüüåüüåü */}
                    <td>{formatDate(order.orderDate)}</td> 
                    <td>‡ß≥ {order.amount.toLocaleString('en-IN')}</td>
                    <td>
                      <span className={`status-badge ${order.status.toLowerCase()}`}>
                          {order.status}
                      </span>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                    <td colSpan="4" style={{ textAlign: 'center', color: '#6c757d', padding: '15px' }}>No new pending orders found.</td>
                </tr>
              )}
            </tbody>
          </table>
          <button className="view-all-btn">View All Orders</button>
        </div>
      </div>
    </div>
  );
};

export default Home;
