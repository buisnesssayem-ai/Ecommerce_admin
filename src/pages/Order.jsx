// src/pages/Order.jsx
import './Order.css';
import React, { useState, useEffect, useMemo } from 'react';
import { FiEye, FiSearch } from 'react-icons/fi'; 
import { useNavigate } from 'react-router-dom'; // ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

// Firebase SDK ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü:
import { 
    initializeApp 
} from 'firebase/app'; 
import { 
    getFirestore, 
    collection, 
    query, 
    orderBy,
    onSnapshot // Realtime Update-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
} from 'firebase/firestore'; 

// Firebase ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü:
import firebaseConfig from '../components/FirebaseConfig'; 

// --- Firebase Initialization ---
const app = initializeApp(firebaseConfig);
const db = getFirestore(app); 

// --- ‡¶°‡ßá‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (Oct 4, 2025 ‡¶ï‡¶Æ‡¶æ ‡¶∏‡¶π) ---
const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = timestamp.toDate(); 
    return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short', 
        day: 'numeric',
    });
};

// --- ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ---
const STATUS_TABS = [
    { key: 'all', label: 'All Orders' },
    { key: 'Pending', label: 'Pending' },
    { key: 'Shipped', label: 'Shipped' },
    { key: 'Out for Delivery', label: 'Out for Delivery' },
    { key: 'Delivered', label: 'Delivered' },
];

const OrderListPage = () => {
    const [allOrders, setAllOrders] = useState([]); 
    const [currentTab, setCurrentTab] = useState('all'); 
    const [searchTerm, setSearchTerm] = useState(''); 
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    // ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø useNavigate ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    const navigate = useNavigate(); 

    // -------------------------------------------------------------
    // üåü Realtime Update: onSnapshot ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ üåü
    // -------------------------------------------------------------
    useEffect(() => {
        const ordersRef = collection(db, "orders");
        
        // Query: ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶≤‡ßã‡¶°, ‡¶®‡¶§‡ßÅ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã
        const q = query(
            ordersRef, 
            orderBy("createdAt", "desc") 
        );
        
        // onSnapshot ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã (‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü)
        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            
            const fetchedOrders = querySnapshot.docs.map(doc => {
                const data = doc.data();
                return {
                    id: doc.id,
                    orderID: data.orderNumber || doc.id.substring(0, 8).toUpperCase(), 
                    orderDate: data.createdAt, 
                    amount: data.totalPayable || 0,
                    status: data.status,
                };
            });
            
            setAllOrders(fetchedOrders);
            setLoading(false); 
            setError(null);

        }, (error) => {
            // ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
            console.error("Error setting up realtime listener: ", error);
            setError("Failed to load orders realtime. Check console for details.");
            setLoading(false);
        });
        
        // Cleanup ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ü‡¶®‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
        return () => unsubscribe(); 

    }, []); 

    // -------------------------------------------------------------
    // üåü ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï üåü
    // -------------------------------------------------------------
    const filteredOrders = useMemo(() => {
        let list = allOrders;

        // ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞‡¶ø‡¶Ç
        if (currentTab !== 'all') {
            list = list.filter(order => order.status === currentTab);
        }

        // ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞‡¶ø‡¶Ç (Order ID/Number ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ)
        if (searchTerm) {
            const lowerCaseSearch = searchTerm.toLowerCase();
            list = list.filter(order => 
                order.orderID.toLowerCase().includes(lowerCaseSearch)
            );
        }

        return list;
    }, [allOrders, currentTab, searchTerm]);
    
    // --- Action Handlers: View Details ---
    const handleViewDetails = (orderId) => {
        // ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßá‡¶ú‡ßá ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        navigate(`/orders/${orderId}`);
    };
    

    // --- Loading and Error States ---
    if (loading) {
        return <div className="order-page-container"><p>Loading All Orders...</p></div>;
    }
    
    if (error) {
        return <div className="order-page-container"><p className="error-message">Error: {error}</p></div>;
    }

    // --- JSX RENDER ---
    return (
        <div className="order-page-container">
            <h1 className="order-page-header">All Orders ({allOrders.length})</h1>
            <p className="order-page-subheader">Use the tabs and search bar to filter orders.</p>

            {/* --- ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶¨‡¶ï‡ßç‡¶∏ ‡¶ì ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ --- */}
            <div className="order-controls-bar">
                
                {/* ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶¨‡¶ï‡ßç‡¶∏ */}
                <div className="search-box">
                    <FiSearch className="search-icon" />
                    <input
                        type="text"
                        placeholder="Search by Order ID..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>
                
                {/* ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ */}
                <div className="tab-system">
                    {STATUS_TABS.map((tab) => (
                        <button
                            key={tab.key}
                            className={`tab-button ${currentTab === tab.key ? 'active' : ''}`}
                            onClick={() => setCurrentTab(tab.key)}
                        >
                            {tab.label} ({allOrders.filter(o => tab.key === 'all' || o.status === tab.key).length})
                        </button>
                    ))}
                </div>
            </div>


            <div className="order-table-wrapper">
                {filteredOrders.length > 0 ? (
                    <table className="order-list-table">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Date</th>
                                <th>Amount (‡ß≥)</th>
                                <th>Status</th>
                                <th className="th-action">Details</th> 
                            </tr>
                        </thead>
                        <tbody>
                            {filteredOrders.map((order) => (
                                <tr key={order.id}>
                                    <td>{order.orderID}</td>
                                    <td>{formatDate(order.orderDate)}</td>
                                    <td>‡ß≥ {order.amount.toLocaleString('en-IN')}</td>
                                    <td>
                                        {/* Status-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá CSS ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡¶æ ‡¶π‡¶æ‡¶á‡¶´‡ßá‡¶® ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã */}
                                        <span className={`status-badge ${order.status.toLowerCase().replace(/ /g, '-')}`}>
                                            {order.status}
                                        </span>
                                    </td>
                                    <td>
                                        <div className="order-actions">
                                            <button 
                                                className="action-icon-btn view-btn" 
                                                onClick={() => handleViewDetails(order.id)}
                                                title="View Details"
                                            >
                                                <FiEye className="button-icon-margin"/> View Details 
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                ) : (
                    <div className="no-data-message">
                        No {currentTab !== 'all' ? currentTab : ''} orders found.
                    </div>
                )}
            </div>
        </div>
    );
};

export default OrderListPage;
